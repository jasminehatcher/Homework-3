 1. In a language, each sentence is a string starting with a capital letter followed by two or more small letters and ending with three or more digits. Example sentences are Abc001, Zyxw9876 etc. 
a) Write a BNF grammar for the language.
<string> ::= <uppercase> <lowercase> <lowercase> <digit> <digit> <digit>
<uppercase> ::=  [A-Z]
<lowercase> ::= [a-z]+
<digit> ::= [0-9]+

b) Show the derivation and the parse tree of the string Test3501.





2. Augment the following BNF to write an attribute grammar. Assume the only possible variable types are integer and float. The language rules are as follows: 

 1) The types of variables in an expression do not have to be the same. The type of the expression result is that of the first (or leftmost) variable in the expression. 
<assign> → <var> = <expr> 
<var>type= int = <expr> type = int
<var>type= float = <expr>type = int/float


 2) If the type of variable to be assigned is integer, the type of the expression must be integer. 

 <expr>→<var> + <var>
 <expr>type = int → <var>type = int + <var>type = float/int
 <expr>type = float → <var>type = float + <var>type = int/float


  3) If the type of variable to be assigned is float, the type of the expression can be integer or float.
 
<assign> ® <var> = <expr> <expr> ® <var> + <var> <expr> ® <var> - <var> <expr> ® <var> <var> ® A | B | C 

<expr> → <var>  → <var>
<expr> type = int  → <var> type = int  → <var> type = int/ float
<expr> type = float  → <var>  type  → <var> type = int/ float
 